subtitle = "2018 (top 10 countries along with top 5 emigration countries)",
caption = "https://www.worldbank.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL) +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(scales)
library(readxl)
library(ggplot2)
library(dplyr)
library(scales)
setwd(getwd())
df_mig_rates <- read_xlsx("Data/migration_rate.xl", skip = 1, trim_ws = TRUE, na = "NA")
df_mig_rates <- read_xlsx("Data/migration_rate.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
setwd(getwd())
getwd()
df_mig_rates <- read_xlsx("Data/migration_rate.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
View(df_mig_rates)
typeof(df_mig_rates)
library(tidyr)
?gather
df_mig_rates <- read_xlsx("Data/migration_rate.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
df_mig_rates <- gather(df_mig_rates, key = "year", value = "rate", -country)
View(df_mig_rates)
ggplot(df_mig_rates) +
geom_line(aes(x = year, y = rate)) +
scale_y_continuous(labels = comma) +
labs(title = "GDP per capita",
subtitle = "2018 (Top 10 countries along with top 5 emigration countries)",
caption = "https://www.worldbank.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL) +
coord_flip()
ggplot(df_mig_rates) +
geom_line(aes(x = year, y = rate)) +
scale_y_continuous(labels = comma) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates) +
geom_line(aes(x = year, y = rate, color = country)) +
scale_y_continuous(labels = comma) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates) +
geom_line(aes(x = year, y = rate, color = country)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates) +
geom_point(aes(x = year, y = rate, color = country)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
str(df_mig_rates)
ggplot(df_mig_rates) +
geom_point(aes(x = as.numeric(year), y = rate, color = country)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates) +
geom_line(aes(x = as.factor(year), y = rate, color = country)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates, aes(x = as.factor(year), y = rate, color = country)) +
geom_line(aes(group = 1)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates, aes(x = as.factor(year), y = rate, color = country)) +
geom_line(aes(group = 1)) + geom_point() +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_mig_rates, country == "Eritrea"), aes(x = as.factor(year), y = rate, color = country)) +
geom_line(aes(group = 1)) + geom_point() +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_mig_rates, aes(x = as.factor(year), y = rate, color = country)) +
geom_line(aes(group = 1)) + geom_point() + facet_grid(rows = vars(country)) +
labs(title = "Migration rate",
subtitle = "Migration rate changes",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
library(dplyr)
library(scales)
library(tidyr)
setwd(getwd())
df_pop <- read_xlsx("Data/population.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
df_pop <- read_xlsx("Data/population.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
View(df_pop)
df_pop <- gather(df_pop, key = "year", value = "age_group", -country)
View(df_pop)
df_pop <- read_xlsx("Data/population.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
View(df_pop)
df_pop <- gather(df_pop, key = "pop", value = "age_group", -country, - year)
ggplot(df_pop, aes(x = as.factor(year), y = pop, color = country)) +
geom_line(aes(group = 1)) + geom_point() + facet_grid(rows = vars(country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_pop, aes(x = as.factor(year), y = pop, color = country)) +
geom_bar(aes(group = 1)) + geom_point() + facet_grid(rows = vars(country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(df_pop, aes(x = as.factor(year), y = pop, color = country)) +
geom_bar(aes(group = 1), stat = "identity") + geom_point() + facet_grid(rows = vars(country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
str(df_pop)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = as.factor(age_group), y = pop, color = country), stat = "identity") +
facet_grid(rows = vars(country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = as.factor(age_group), y = pop, fill= country), stat = "identity") +
facet_grid(cols = vars(country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = as.factor(age_group), y = pop, fill= country), stat = "identity") +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = age_group, y = pop, fill= country), stat = "identity") +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = age_group, y = pop, fill= country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_point(aes(x = age_group, y = pop, fill= country)) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
df_pop <- read_xlsx("Data/population.xlsx", skip = 1, trim_ws = TRUE, na = "NA")
df_pop <- gather(df_pop, key = "age_group", value = "pop", -country, -year)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = age_group, y = pop, fill= country), stat = "count") +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = age_group, y = pop, fill= country), stat = "identity") +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(aes(x = age_group, y = pop, fill= country), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019), aes(fill = country)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Maldives"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Micronesia (Fed. States of)"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) +
geom_bar(data = filter(df_pop, country == "Tonga"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019), aes(x = age_group, y = pop, fill = country)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Maldives"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Micronesia (Fed. States of)"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) +
geom_bar(data = filter(df_pop, country == "Tonga"), aes(x = age_group, y = pop), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019), aes(x = age_group, y = pop, fill = country)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Maldives"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Micronesia (Fed. States of)"), stat = "identity", alpha = 0.5) +
geom_bar(data = filter(df_pop, country == "Tonga"), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL)
ggplot(filter(df_pop, year == 2019), aes(x = age_group, y = pop, fill = country)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Maldives"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Micronesia (Fed. States of)"), stat = "identity", alpha = 0.5) +
geom_bar(data = filter(df_pop, country == "Tonga"), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL) + scale_y_continuous(labels = comma)
str(df_pop)
ggplot(filter(df_pop, year == 2019), aes(x = age_group, y = as.numeric(pop), fill = country)) +
geom_bar(data = filter(df_pop, country == "Eritrea"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Lebanon"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Maldives"), stat = "identity", alpha = 0.5) + geom_bar(data = filter(df_pop, country == "Micronesia (Fed. States of)"), stat = "identity", alpha = 0.5) +
geom_bar(data = filter(df_pop, country == "Tonga"), stat = "identity", alpha = 0.5) +
labs(title = "Population distribution",
subtitle = "Different age groups",
caption = "https://population.un.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL) + scale_y_continuous(labels = comma)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
setwd(getwd())
df_gdp_pp <- read_csv("Data/GDP_PP/GDP_PP.csv", skip = 4, trim_ws = TRUE, na = "NA")
df_gdp_pp <- data.frame(df_gdp_pp)
# Source- https://www.worldbank.org/
need <- c("Lebanon", "Micronesia, Fed. Sts.", "Tonga", "Maldives", "Eritrea")
# Identify the top 10 countries and the ranks of the countries we need in 2018.
df_gdp_pp %>%
select(`Country.Name`, `X2018`) %>%
arrange(desc(`X2018`)) %>%
head(n = 20)
top_10 <- c("Monaco", "Luxembourg", "Macao SAR, China", "Switzerland", "Norway",
"Ireland", "Iceland", "Qatar", "Singapore", "United States")
df_gdp_pp_need <- df_gdp_pp %>%
filter(Country.Name %in% top_10 | Country.Name %in% need) %>%
select(`Country.Name`, `X2018`) %>%
arrange(desc(`X2018`))
# GDP per capita is increasing at rate of 7.2% , 2011 value is 811.3760
df_gdp_pp_need$X2018[df_gdp_pp_need$Country.Name == "Eritrea"] <- 811.3760 * 1.072 * 7
ggplot(df_gdp_pp_need) +
geom_bar(aes(x = reorder(Country.Name, X2018), y = X2018), stat = "identity") +
scale_y_continuous(labels = comma) +
labs(title = "GDP per capita",
subtitle = "2018 (Top 10 countries along with top 5 emigration countries)",
caption = "https://www.worldbank.org/", parse = TRUE) +
xlab(NULL) + ylab(NULL) +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(readxl)
setwd(getwd())
ls
system("ls")
wave6 <- read_excel("data_wvs.xlsx", sheet = 1)
View(wave6)
wave5 <- read_excel("data_wvs.xlsx", sheet = 2)
wave4 <- read_excel("data_wvs.xlsx", sheet = 3)
wave3 <- read_excel("data_wvs.xlsx", sheet = 4)
wave2 <- read_excel("data_wvs.xlsx", sheet = 5)
wave6$social_class %>% unique()
wave5$social_class %>% unique()
library(jsonlite)
library(httr)
install.packages("reticulate")
library(reticulate)
############################################
# 1. Enter WML Credentials
############################################
wml_credentials <- list(
"apikey"= "SsZbvUwFx8frL66iP8Q1NTXtO6fOD8W1dFEUEk_iruBK",
"instance_id"= "ddec83b7-d733-47a7-96e4-f0fe3f14b636",
"url"= "https://us-south.ml.cloud.ibm.com"
)
### For first mortgage model deployment_uid = "c505b59a-286b-452b-8a1f-f87f2ec88761"
## For xgboost narrative only model deployment_uid = '3d24d09e-2893-4731-aa29-936b0c844413'
deployment_uid='a743eb37-79ef-4102-bde1-863cf7a563cb' ## For linearSVC narratives only model
get_access_token <- function(api_key){
url0 <- "https://iam.bluemix.net/identity/token"
url1 <- paste0(url0, "?apikey=", api_key)
url2 <- paste0(url1, "&grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey")
res <-   POST(url = url2,
add_headers("Content-Type" = "application/x-www-form-urlencoded",
"Authorization" = "Basic Yng6Yng="))
res_content <- content(res)
return(res_content$access_token)
}
access_token <- get_access_token(api_key = "SsZbvUwFx8frL66iP8Q1NTXtO6fOD8W1dFEUEk_iruBK")
access_token
api_endpoint <- 'https://us-south.ml.cloud.ibm.com/v3/wml_instances/ddec83b7-d733-47a7-96e4-f0fe3f14b636/deployments/a743eb37-79ef-4102-bde1-863cf7a563cb/online'
curl_left <- paste("curl -k -X POST ", api_endpoint, " -H \'Authorization: Bearer ", access_token, "\' -H \'Cache-Control: no-cache\' -H \'Content-Type: application/json\' -d \'", sep = "")
curl_right <- '\''
request_body <- toJSON(list(input_data = list(list(fields = "Consumer complaint narrative", values = "my card stolen. there is fraud."))))
cmds <- paste0(curl_left, request_body, curl_right)
res <- system(cmds, intern=T)
res
curl_left <- paste("curl -k -X POST ", api_endpoint, " -H \'Authorization: Bearer ", access_token, "\' -H \'Cache-Control: no-cache\' -H \'Content-Type: application/json\' -d \'", sep = "")
curl_right <- '\''
request_body <- toJSON(list(input_data = list(list(fields = "Consumer_complaint_narrative", values = "my card stolen. there is fraud."))))
cmds <- paste0(curl_left, request_body, curl_right)
res <- system(cmds, intern=T)
res
cmds
api_endpoint <- 'https://us-south.ml.cloud.ibm.com/v3/wml_instances/ddec83b7-d733-47a7-96e4-f0fe3f14b636/deployments/a743eb37-79ef-4102-bde1-863cf7a563cb/online'
curl_left <- paste("curl -k -X POST ", api_endpoint, " -H \'Authorization: Bearer ", access_token, "\' -H \'Cache-Control: no-cache\' -H \'Content-Type: application/json\' -d \'", sep = "")
curl_right <- '\''
request_body <- toJSON(list(scoring_payload = list(list(fields = "Consumer_complaint_narrative", values = "my card stolen. there is fraud."))))
cmds <- paste0(curl_left, request_body, curl_right)
res <- system(cmds, intern=T)
res
request_body <- toJSON(list(input_data = list(fields = "Consumer_complaint_narrative", values = "my card stolen. there is fraud.")))
cmds <- paste0(curl_left, request_body, curl_right)
res <- system(cmds, intern=T)
res
l <- sapply(res, function(x) {list (fzomJSON (fromJSON (x) $result [1]) [c('predictions', 'message')])})
l
View(l)
res[1]
res
res$status
l <- sapply(res, function(x) {list (fromJSON (fromJSON (x) $result [1]) [c('predictions', 'message')])})
l
View(l)
?system
library(reticulate)
setwd(getwd())
reticulate::py_load_object('model-dir/model_svc_fit.pkl', pickle = "pickle")
getwd()
setwd(getwd())
getwd()
getwd()
setwd(getwd())
getwd()
setwd("~/Desktop/Practicum/model_dashboard")
# setwd(getwd())
setwd("~/Desktop/Practicum/model_dashboard")
reticulate::py_load_object('model-dir/model_svc_fit.pkl', pickle = "pickle")
conda_install(scikit_learn)
conda_install("scikit_learn")
reticulate::py_load_object('model-dir/model_svc_fit.pkl', pickle = "pickle")
conda activate scikit_learn
reticulate::py_run_string("import pickle; pickle.load( open('model-dir/model_svc_fit.pkl', 'rb'))")
reticulate::py_run_string("import pickle; import sklearn; pickle.load( open('model-dir/model_svc_fit.pkl', 'rb'))")
# setwd(getwd())
setwd("~/Desktop/Practicum/model_dashboard")
reticulate::source_python('load.ipynb')
predict("hey what's up with you")
predict()
reticulate::source_python('predict_narrative.ipynb')
predict_narrative("hey what's up with you")
reticulate::py_run_file("predict_narrative.ipynb")
predict_narrative("hey what's up with you")
View(r)
reticulate::source_python('sub.py')
reticulate::source_python('sub.py')
sub(10, 2)
reticulate::source_python('predict_narrative.py')
predict_narrative("hey what is up")
reticulate::source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
Sys.which("python")
library(sklearn)
conda_list()
use_condaenv("anaconda3")
LinearSVC_mortgage_narratives("hey what is up")
reticulate::source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
use_condaenv("scikit_learn")
LinearSVC_mortgage_narratives("hey what is up")
reticulate::source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_condaenv("anaconda3")
reticulate::source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
conda_install(sklearn)
conda_install(scikit-learn)
conda_install("scikit-learn")
conda_install("sklearn")
?conda_install
conda_list()
use_condaenv("sklearn")
reticulate::source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
reticulate::repl_python()
source_python('LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
?py_call_impl
py_run_file("LinearSVC_mortgage_narratives.py")
LinearSVC_mortgage_narratives("hey what is up")
?source_python
source_python('LinearSVC_mortgage_narratives.py', envir = use_condaenv("sklearn"))
LinearSVC_mortgage_narratives("hey what is up")
source_python('LinearSVC_mortgage_narratives.py', envir = use_condaenv("anaconda3"))
LinearSVC_mortgage_narratives("hey what is up")
reticulate::source_python('~/Desktop/Practicum/model_dashboard/LinearSVC_mortgage_narratives.py')
LinearSVC_mortgage_narratives("hey what is up")
def LinearSVC_mortgage_narratives(new_narrative):
sklearn <- import("sklearn")
sklearn <- import("os")
View(sklearn)
sklearn <- import("scikit-learn")
conda_list()
conda_install("r-reticulate", "sklearn")
conda_install("r-reticulate", "scikit-learn")
sklearn <- import("scikit-learn")
sklearn <- import("scikit-learn-0.21.3")
conda_list()
use_condaenv("r-reticulate")
sklearn <- import("scikit-learn-0.21.3")
sklearn <- import("scikit-learn")
source_python('LinearSVC_mortgage_narratives.py', envir = use_condaenv("r-reticulate"))
LinearSVC_mortgage_narratives("hey what is up")
conda_install("r-reticulate", "pandas")
use_condaenv("r-reticulate")
source_python('LinearSVC_mortgage_narratives.py', envir = use_condaenv("r-reticulate"))
LinearSVC_mortgage_narratives("hey what is up")
new_narrative <- "hey what is up"
LinearSVC_mortgage_narratives(new_narrative)
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predict_narrative(new_narrative)
shiny::runApp()
df = read.csv("data/narratives_mortgage.csv", stringsAsFactors = FALSE)
View(df)
# create the plot
product_plot = ggplot(df, aes(as.factor(Company.response.to.consumer))) +
#geom_histogram(breaks = hist_bins, fill = 'blue', alpha = .7) +
geom_histogram(fill = 'blue', alpha = .7, stat = "count") +
theme_bw() +
labs(x = "Company response",
y = 'Count',
title = 'Histogram of Company responses to complaints') +
theme(text = element_text(face = 'bold'))
# Display the plot (whether it has facets or not)
product_plot
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predicted_value <- predict_narrative("give money back, credit card")
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predicted_value <- predict_narrative("give money back, credit card")
library(reticulate)
use_condaenv("r-reticulate")
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predicted_value <- predict_narrative("give money back, credit card")
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predict_narrative("give money back, credit card")
source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
library(shiny)
library(ggplot2)
library(dplyr)
library(reticulate)
use_condaenv("r-reticulate")
source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predicted_value <- predict_narrative("give money back, credit card")
reticulate::repl_python()
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predict_narrative(new_narrative)
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predict_narrative(new_narrative)
# setwd(getwd())
setwd("~/Desktop/Practicum/model_dashboard")
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
predict_narrative(new_narrative)
source_python("predict_narrative.py")
reticulate::source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))
system(source_python('predict_narrative.py', envir = use_condaenv("r-reticulate")))
system("source_python('predict_narrative.py', envir = use_condaenv("r-reticulate"))")
system("source_python('predict_narrative.py', envir = use_condaenv('r-reticulate'))")
library(reticulate)
use_condaenv("r-reticulate")
source_python('predict_narrative.py', envir = use_condaenv('r-reticulate'))
predict_narrative(new_narrative)
reticulate::repl_python()
source_python('LinearSVC_mortgage_narratives.py', envir = use_condaenv("r-reticulate"))
LinearSVC_mortgage_narratives("hey what is up")
source_python('LinearSVC_mortgage_narratives.py')
source_python('predict_narrative.py')
source_python('predict_narrative.py')
predicted_value <- predict_narrative("give money back, credit card")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
